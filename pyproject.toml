[project]
name = "eve-means-of-profit"
version = "0.1.0"
description = "A fully featured EVE Online tool for asset tracking, manufacturing and trading analysis."
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "pydantic>=2.12.2",
    "pyqt6>=6.10.0",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
]

authors = [{ name = "Tyron Denker", email = "tyronevedenker@gmail.com" }]

[tool.ruff]
line-length = 88
target-version = "py313"
# exclude = [
#     ".git",
#     "__pycache__",
#     ".venv",
#     "venv",
#     "build",
#     "dist",
#     "*.egg-info",
# ]

[tool.ruff.lint]
ignore = [
    # lint + format conflicts https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",   # tab-indentation
    "E111",   # indentation-with-invalid-multiple
    "E114",   # indentation-with-invalid-multiple-comment
    "E117",   # over-indented
    "D206",   # docstring-tab-indentation
    "D300",   # triple-single-quotes
    "Q000",   # bad-quotes-inline-string
    "Q001",   # bad-quotes-multiline-string
    "Q002",   # bad-quotes-docstring
    "Q003",   # avoidable-escaped-quote
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
    "ISC002", # multi-line-implicit-string-concatenation

    # additional ignores
    "E501",    # line too long (handled by formatter)
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "FA",  # flake8-future-annotations
    "LOG", # flake8-logging
    # "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SLF", # flake8-self
    # "SIM", # flake8-simplify
    "TID",
    # "DOC", # pydoclint
    # "D",   # pydocstyle
    # "PL",  # pylint
    "RUF", # ruff-specific rules
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    # "PLR2004", # magic values in tests are okay
    # "S101",    # assert usage is fine in tests
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true # Format code examples in docstrings

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ty.environment]
python-version = "3.13"
root = ["./src"]

[tool.ty.src]
include = ["src", "tests"]
exclude = ["**/__pycache__", "**/*.pyc"]
